// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

export const commands = {
  async openSettings(): Promise<
    __Result__<null, 'NoPortSet' | 'Io' | 'SerialPort' | 'Tauri' | 'Store' | 'PelcoD'>
  > {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('plugin:tauri-specta|open_settings') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async ready(): Promise<
    __Result__<null, 'NoPortSet' | 'Io' | 'SerialPort' | 'Tauri' | 'Store' | 'PelcoD'>
  > {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('plugin:tauri-specta|ready') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async setPort(
    port: string | null,
  ): Promise<__Result__<null, 'NoPortSet' | 'Io' | 'SerialPort' | 'Tauri' | 'Store' | 'PelcoD'>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('plugin:tauri-specta|set_port', { port }) };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async cameraPower(power: boolean): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|camera_power', { power });
  },
  async autofocus(autofocus: boolean): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|autofocus', { autofocus });
  },
  async goToPreset(preset: number, presetName: string): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|go_to_preset', { preset, presetName });
  },
  async setPreset(preset: number, presetName: string): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|set_preset', { preset, presetName });
  },
  async moveCamera(direction: string): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|move_camera', { direction });
  },
  async stopMove(): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|stop_move');
  },
  async zoom(direction: string): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|zoom', { direction });
  },
  async stopZoom(): Promise<null> {
    return await TAURI_INVOKE('plugin:tauri-specta|stop_zoom');
  },
  async getPorts(): Promise<
    __Result__<string[], 'NoPortSet' | 'Io' | 'SerialPort' | 'Tauri' | 'Store' | 'PelcoD'>
  > {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('plugin:tauri-specta|get_ports') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
};

export const events = __makeEvents__<{
  portStateEvent: PortStateEvent;
}>({
  portStateEvent: 'plugin:tauri-specta:port-state-event',
});

/** user-defined types **/

export type PortStateEvent = { port: string | null; status: string };

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from '@tauri-apps/api';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';
import { type WebviewWindowHandle as __WebviewWindowHandle__ } from '@tauri-apps/api/window';

type __EventObj__<T> = {
  listen: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> = { status: 'ok'; data: T } | { status: 'error'; error: E };

function __makeEvents__<T extends Record<string, any>>(mappings: Record<keyof T, string>) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case 'listen':
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case 'once':
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case 'emit':
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
