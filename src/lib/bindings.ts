/* eslint-disable */ // @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async openSettings(): Promise<null> {
    return await TAURI_INVOKE('open_settings');
  },
  async getState(): Promise<UIStateEvent> {
    return await TAURI_INVOKE('get_state');
  },
  async setPort(portName: string | null): Promise<void> {
    await TAURI_INVOKE('set_port', { portName });
  },
  async cameraPower(power: boolean): Promise<void> {
    await TAURI_INVOKE('camera_power', { power });
  },
  async autofocus(autofocus: boolean): Promise<void> {
    await TAURI_INVOKE('autofocus', { autofocus });
  },
  async goToPreset(preset: number, name: string): Promise<void> {
    await TAURI_INVOKE('go_to_preset', { preset, name });
  },
  async setPreset(preset: number, name: string): Promise<void> {
    await TAURI_INVOKE('set_preset', { preset, name });
  },
  async moveCamera(direction: string): Promise<void> {
    await TAURI_INVOKE('move_camera', { direction });
  },
  async stopMove(): Promise<void> {
    await TAURI_INVOKE('stop_move');
  },
  async zoom(direction: string): Promise<void> {
    await TAURI_INVOKE('zoom', { direction });
  },
  async stopZoom(): Promise<void> {
    await TAURI_INVOKE('stop_zoom');
  },
  async getPorts(): Promise<string[]> {
    return await TAURI_INVOKE('get_ports');
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  uiStateEvent: UIStateEvent;
}>({
  uiStateEvent: 'ui-state-event',
});

/** user-defined constants **/

/** user-defined types **/

export type Error =
  | { type: 'NoPortSet' }
  | { type: 'Tauri' }
  | { type: 'Store' }
  | { type: 'Io' }
  | { type: 'SerialPort' }
  | { type: 'PelcoD' };
export type UIStateEvent = { port: string | null; ports: string[] | null; status: string };

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';
import { type WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow';

type __EventObj__<T> = {
  listen: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
  : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> = { status: 'ok'; data: T } | { status: 'error'; error: E };

function __makeEvents__<T extends Record<string, any>>(mappings: Record<keyof T, string>) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case 'listen':
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case 'once':
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case 'emit':
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
